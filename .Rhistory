contour(px1, px2, matrix(func, 69, 99), level = 0, add = TRUE)
contour(px1, px2, matrix(prob, 69, 99), level = 0.5, add = TRUE, col = "blue")
?prcomp
?biplot
?kmeans
?dist
?hclust
diag(3)
Xg = c(-1, 0, 1)
Xg <- Xg / norm(Xg, "2")
Sigma <- diag(3) - Xg %*% t(Xg)
Sigma
?det
det(Sigma)
library(MASS)
?mvrnorm
one <- c(1, 1, 1) / sqrt(3)
Xg = c(-1, 0, 1)
Xg <- Xg / norm(Xg, "2")
Sigma <- diag(3) - Xg %*% t(Xg) - one %*% t(one)
Sigma
Sigma * 3
Xg = c(-1, -1, 2)
Xg <- Xg / norm(Xg, "2")
Sigma <- diag(3) - Xg %*% t(Xg) - one %*% t(one)
Sigma
exp(-2.3544081)
exp(-1.661251)
exp(0.0606154)
library(MASS)
N <- 1000
mu <- c(1,2)
sig <- matrix(c(1,0.4,0.4,1.3), 2)
sigsvd <- svd(sig)
u <- sigsvd$u
sigsqrt <- u %*% diag(sqrt(sigsvd$d)) %*% t(u)
alpha <- 0.75
r <- sqrt(-2*log(1-alpha))
t <- seq(from=0, to=2*pi, length.out=100)
z <- mu + r * sigsqrt %*% matrix(c(cos(t),sin(t)), nrow=2, byrow=T)
bivn <- mvrnorm(N, mu, sig)
plot(bivn[,1], bivn[,2], xlab='x1', ylab='x2', asp=1,
xlim=range(bivn[,1],z[1,]), ylim=range(bivn[,2],z[2,]))
lines(z[1,], z[2,], col='red')
qnorm(.975)
?qchisq
qchisq(.75, df = 2)
library(MASS)
## INITIALIZATION
N <- 1000
mu <- c(1,2)
sig <- matrix(c(1,0.4,0.4,1.3), 2)
## COMPUTE SQUARE ROOT OF SIGMA
sigsvd <- svd(sig)
u <- sigsvd$u
sigsqrt <- u %*% diag(sqrt(sigsvd$d)) %*% t(u)
## PARAMETERIZATION OF ELLIPSE
alpha <- 0.75
r <- sqrt(-2*log(1-alpha))
t <- seq(from=0, to=2*pi, length.out=100)
z <- mu + r * sigsqrt %*% matrix(c(cos(t),sin(t)), nrow=2, byrow=T)
## PLOT RANDOM SAMPLE AND ELLIPSE
## Computed ellipse first so that I could make xlim and ylim big enough.
bivn <- mvrnorm(N, mu, sig)
plot(bivn[,1], bivn[,2], xlab='x1', ylab='x2', asp=1,
xlim=range(bivn[,1],z[1,]), ylim=range(bivn[,2],z[2,]))
lines(z[1,], z[2,], col='red')
## PLOT CONDITIONAL MEAN
meanint <- mu[2] - mu[1]*sig[2,1]/sig[1,1]
meanslope <- sig[2,1]/sig[1,1]
abline(a=meanint, b=meanslope, col='blue')
## PLOT CONDITIONAL CONFIDENCE INTERVALS
condsd <- sqrt(sig[2,2] - sig[2,1]^2/sig[1,1])
lty <- 2
for (beta in c(0.5,0.95)) {
z <- qnorm((1+beta)/2)
abline(a=meanint+z*condsd, b=meanslope, col='blue', lty=lty)
abline(a=meanint-z*condsd, b=meanslope, col='blue', lty=lty)
lty <- lty + 1
}
alpha <- 0.75
c <- qchisq(alpha, df = 2)
t <- seq(from=0, to=2*pi, length.out=100)
rm(list = ls())
N <- 1000
mu <- c(1,2)
sig <- matrix(c(1,0.4,0.4,1.3), 2)
sigsvd <- svd(sig)
u <- sigsvd$u
alpha <- 0.75
c <- qchisq(alpha, df = 2)
t <- seq(from=0, to=2*pi, length.out=100)
matrix(c(cos(t),sin(t)), nrow=2, byrow=T)
alpha <- 0.75
c <- qchisq(alpha, df = 2)
t <- seq(from=0, to=2*pi, length.out=100)
y <- sqrt(sigsvd$d) %*% matrix(c(cos(t),sin(t)), nrow=2, byrow=T)
x <- mu + u %*% y
dim(y)
sqrt(sigsvd$d)
y <- diag(sqrt(sigsvd$d)) %*% matrix(c(cos(t),sin(t)), nrow=2, byrow=T)
x <- mu + u %*% y
lines(x[,1], x[,2], col='green')
lines(x[1,], x[2,], col='green')
y <- sqrt(c) * diag(sqrt(sigsvd$d)) %*% matrix(c(cos(t),sin(t)), nrow=2, byrow=T)
x <- mu + u %*% y
lines(x[1,], x[2,], col='green')
pi
x <- seq(0, 2 * pi, length.out = 100)
plot(x, sin(x^2), type = "l")
x <- seq(0, 2 * pi, length.out = 500)
plot(x, sin(x^2), type = "l")
x <- seq(0, 2, length.out = 500)
plot(x, sin(x^2), type = "l")
x <- seq(0, 5, length.out = 500)
plot(x, sin(x^2), type = "l")
plot(x, sin(x^2), type = "l", xlab = expression(x))
plot(x, sin(x^2), type = "l", ylab = expression(sin(x^2)))
par(mar = c(5, 5, 4, 2))
x <- seq(0, 5, length.out = 500)
plot(x, sin(x^2), type = "l", ylab = expression(sin(x^2)))
main = expression(paste("Plot of x vs. " expression(sin(x^2))))
main = expression(paste("Plot of x vs. ", expression(sin(x^2))))
plot(x, sin(x^2), type = "l", ylab = expression(sin(x^2)),
main = expression(paste("Plot of x vs. ", expression(sin(x^2))))
plot(x, sin(x^2), type = "l", ylab = expression(sin(x^2)),
main = expression(paste("Plot of x vs. ", expression(sin(x^2)))))
plot(x, sin(x^2), type = "l", ylab = expression(sin(x^2)),
main = expression(paste("Plot of x vs. ", expression(sin(x^2)))))
plot(x, sin(x^2), type = "l", ylab = expression(sin(x^2)),
main = expression(paste("Plot of x vs. ", sin(x^2))))
plot(x, sin(x^2), type = "l", ylab = expression(sin(x^2)),
main = expression(paste("Plot of " sin(x^2), " vs. x")))
plot(x, sin(x^2), type = "l", ylab = expression(sin(x^2)),
main = expression(paste("Plot of ", sin(x^2), " vs. x")))
qchisq(0.75, df = 2)
qchisq(0.25, df = 2)
### R CODE FOR PROBLEM 2
library(MASS)
## INITIALIZATION
N <- 1000
mu <- c(1,2)
sig <- matrix(c(1,0.4,0.4,1.3), 2)
## SVD
sigsvd <- svd(sig)
u <- sigsvd$u
## PARAMETRIZATION OF ELLIPSE
alpha <- 0.75
c <- qchisq(alpha, df = 2)
t <- seq(from=0, to=2*pi, length.out=100)
y <- sqrt(c) * diag(sqrt(sigsvd$d)) %*%
matrix(c(cos(t),sin(t)), nrow=2, byrow=T)
x <- mu + u %*% y
## PLOT RANDOM SAMPLE AND ELLIPSE
bivn <- mvrnorm(N, mu, sig)
plot(bivn[,1], bivn[,2], xlab='x1', ylab='x2', asp=1,
xlim=range(bivn[,1],z[1,]), ylim=range(bivn[,2],z[2,]))
lines(x[1,], x[2,], col='red')
## PLOT CONDITIONAL MEAN
meanint <- mu[2] - mu[1]*sig[2,1]/sig[1,1]
meanslope <- sig[2,1]/sig[1,1]
abline(a=meanint, b=meanslope, col='blue')
## PLOT CONDITIONAL CONFIDENCE INTERVALS
condsd <- sqrt(sig[2,2] - sig[2,1]^2/sig[1,1])
lty <- 2
for (beta in c(0.5,0.95)) {
z <- qnorm((1+beta)/2)
abline(a=meanint+z*condsd, b=meanslope, col='blue', lty=lty)
abline(a=meanint-z*condsd, b=meanslope, col='blue', lty=lty)
lty <- lty + 1
}
bivn <- mvrnorm(N, mu, sig)
plot(bivn[,1], bivn[,2], xlab='x1', ylab='x2', asp=1,
xlim=range(bivn[,1],x[1,]), ylim=range(bivn[,2],x[2,]))
lines(x[1,], x[2,], col='red')
meanint <- mu[2] - mu[1]*sig[2,1]/sig[1,1]
meanslope <- sig[2,1]/sig[1,1]
abline(a=meanint, b=meanslope, col='blue')
condsd <- sqrt(sig[2,2] - sig[2,1]^2/sig[1,1])
lty <- 2
for (beta in c(0.5,0.95)) {
z <- qnorm((1+beta)/2)
abline(a=meanint+z*condsd, b=meanslope, col='blue', lty=lty)
abline(a=meanint-z*condsd, b=meanslope, col='blue', lty=lty)
lty <- lty + 1
}
alpha <- 0.25
c <- qchisq(alpha, df = 2)
t <- seq(from=0, to=2*pi, length.out=100)
y <- sqrt(c) * diag(sqrt(sigsvd$d)) %*%
matrix(c(cos(t),sin(t)), nrow=2, byrow=T)
x <- mu + u %*% y
## PLOT RANDOM SAMPLE AND ELLIPSE
bivn <- mvrnorm(N, mu, sig)
plot(bivn[,1], bivn[,2], xlab='x1', ylab='x2', asp=1,
xlim=range(bivn[,1],x[1,]), ylim=range(bivn[,2],x[2,]))
lines(x[1,], x[2,], col='red')
meanX <- c(1,2)
var = matrix(c(1, 0.4, 0.4, 1.3), 2)
library(MASS)
mean_bvn <- meanX
cov_bvn <- var
library(MASS)
bvn <- mvrnorm(200, mu = meanX, Sigma = var)
plot(bvn[,1], bvn[,2])
cond_mean <- mean_bvn[2] + cov_bvn[2,1] %*% (cov_bvn[1,1]^(-1)) %*% (bvn[,1] - mean_bvn[1])
plot(bvn[,1], cond_mean)
### R CODE FOR PROBLEM 2
library(MASS)
## INITIALIZATION
N <- 1000
mu <- c(1,2)
sig <- matrix(c(1,0.4,0.4,1.3), 2)
## SVD
sigsvd <- svd(sig)
u <- sigsvd$u
## PARAMETRIZATION OF ELLIPSE
alpha <- 0.75
c <- qchisq(alpha, df = 2)
t <- seq(from=0, to=2*pi, length.out=100)
y <- sqrt(c) * diag(sqrt(sigsvd$d)) %*%
matrix(c(cos(t),sin(t)), nrow=2, byrow=T)
x <- mu + u %*% y
## PLOT RANDOM SAMPLE AND ELLIPSE
bivn <- mvrnorm(N, mu, sig)
plot(bivn[,1], bivn[,2], xlab='x1', ylab='x2', asp=1,
xlim=range(bivn[,1],x[1,]), ylim=range(bivn[,2],x[2,]))
lines(x[1,], x[2,], col='red')
## PLOT CONDITIONAL MEAN
meanint <- mu[2] - mu[1]*sig[2,1]/sig[1,1]
meanslope <- sig[2,1]/sig[1,1]
abline(a=meanint, b=meanslope, col='blue')
## PLOT CONDITIONAL CONFIDENCE INTERVALS
condsd <- sqrt(sig[2,2] - sig[2,1]^2/sig[1,1])
lty <- 2
for (beta in c(0.5,0.95)) {
z <- qnorm((1+beta)/2)
abline(a=meanint+z*condsd, b=meanslope, col='blue', lty=lty)
abline(a=meanint-z*condsd, b=meanslope, col='blue', lty=lty)
lty <- lty + 1
}
plot(bivn[,1], bivn[,2], xlab='x1', ylab='x2', asp=1,
xlim = c(-0.5, 2.5), ylim = c(0, 4))
#xlim=range(bivn[,1],x[1,]), ylim=range(bivn[,2],x[2,]))
lines(x[1,], x[2,], col='red')
?ellipse
?ellipse
library(ellipse)
install.packages("ellipse")
library(ellipse)
mu
sigma
sig
ellipse(mu = mu, sigma = sig)
ellipse(mu = mu, sigma = sig, alpha = 0.25)
?ellipse
### R CODE FOR PROBLEM 2
library(MASS)
## INITIALIZATION
N <- 1000
mu <- c(1,2)
sig <- matrix(c(1,0.4,0.4,1.3), 2)
## SVD
sigsvd <- svd(sig)
u <- sigsvd$u
## PARAMETRIZATION OF ELLIPSE
alpha <- 0.75
c <- qchisq(alpha, df = 2)
t <- seq(from=0, to=2*pi, length.out=100)
y <- sqrt(c) * diag(sqrt(sigsvd$d)) %*%
matrix(c(cos(t),sin(t)), nrow=2, byrow=T)
x <- mu + u %*% y
## PLOT RANDOM SAMPLE AND ELLIPSE
bivn <- mvrnorm(N, mu, sig)
plot(bivn[,1], bivn[,2], xlab='x1', ylab='x2', asp=1,
xlim = c(0, 2), ylim = c(0, 4))
lines(x[1,], x[2,], col='red')
qnorm(0.975)
qnorm(0.875)
library(ellipse)
ellipse(mu, sig, npoints = 200, alpha = 0.25, col = 2)
plot(bivn[,1], bivn[,2], xlab='x1', ylab='x2', asp=1,
xlim=range(bivn[,1],x[1,]), ylim=range(bivn[,2],x[2,]))
ellipse(mu, sig, npoints = 200, alpha = 0.25, col = 2)
plot(ellipse(mu, sig, npoints = 200, alpha = 0.25, col = 2))
temp <- ellipse(mu, sig, npoints = 200, alpha = 0.25, col = 2)
plot(temp[,1], temp[,2])
mu
sigma
sig
library(ellipse)
ellipse(sig, centre = mu, level = 0.25)
ellipse::ellipse(sig, centre = mu, level = 0.25)
plot(ellipse::ellipse(sig, centre = mu, level = 0.25))
?ellipse::ellipse
plot(ellipse::ellipse(sig, centre = mu, level = 0.25))
plot(ellipse::ellipse(sig, centre = mu, level = 0.75))
library(glmnet)
?glmnet
library(glmnet)
?glment
?glmnet
a = 6.97
b = 9
2 * a * (log(a / b) - (1 - b / a))
a = 9
b = 6.97
2 * a * (log(a / b) - (1 - b / a))
a = 7; b = 4.21
2 * a * (log(a / b) - (1 - b / a))
a = 18; b = 13.77
2 * a * (log(a / b) - (1 - b / a))
df <- data.frame()
df
1/sqrt(30)
0.29 * sqrt(30)
10 * sqrt(30)
0.33 * sqrt(23)
(0.29 * sqrt(30))^2
(0.33 * sqrt(23))^2
(0.33 * sqrt(28))^2
(0.33 * sqrt(37))^2
devtools::install_github("AndreaCirilloAC/updateR")
updateR(admin_password = "piyo<3piyo")
library(updateR)
updateR(admin_password = "piyo<3piyo")
install.packages(as.vector(needed_packages))
updateR()
library(updateR)
updateR(admin_password = "piyo<3piyo")
install.packages(as.vector(needed_packages))
stopifnot(.Platform$OS.type == "unix")
updateR(admin_password = "piyo\<\3piyo")
updateR()
?updateR
updateR(admin_password = "piyo<3piyo")
install.packages(as.vector(needed_packages))
updateR(admin_password = "piyo<3piyo")
library(updateR)
install.packages("devtools")
devtools::install_github("AndreaCirilloAC/updateR")
library(updateR)
updateR(admin_password = "piyo<3piyo")
packs = as.data.frame(installed.packages(.libPaths()[1]), stringsAsFactors = F)
packs
install.packages(packs$Package)
install.packages(packs$Package)
install.packages(packs$Package)
install.packages(packs$Package)
update.packages(checkBuilt=TRUE, ask=FALSE)
installed.packages()
install.packages("glmnet")
install.packages("tidyverse")
install.packages("lme4")
install.packages("e1071")
install.packages("superpc")
install.packages("PMA")
x <- rnorm(50)
x - mean(x)
mean(x)
x <- x - mean(x)
x
mean(x)
sum((x / sum(x^2))^2)
sum((x / sqrt(sum(x^2)))^2)
x <- x / sqrt(sum(x^2))
mean(x)
sum(x^2)
x
y <- rnorm(50)
lm(y ~ x)
summary(lm(y ~ x))
lm$resd
lm$resid
fit <- lm(y ~ x)
fit$residuals
sum(fit$residuals^2) / 48
sqrt(sum(fit$residuals^2) / 48)
s <- sqrt(sum(fit$residuals^2) / 48)
sum(x * y)/s
summary(fit)
y1 <- 5 * y
summary(lm(y1 ~ x))
y2 <- 5 * y + 6
summary(lm(y2 ~ x))
x <- rnorm(50)
x - mean(x)
mean(x)
x <- x - mean(x)
x
mean(x)
sum((x / sum(x^2))^2)
sum((x / sqrt(sum(x^2)))^2)
x <- x / sqrt(sum(x^2))
mean(x)
sum(x^2)
x
y <- rnorm(50)
lm(y ~ x)
summary(lm(y ~ x))
lm$resd
lm$resid
fit <- lm(y ~ x)
fit$residuals
sum(fit$residuals^2) / 48
sqrt(sum(fit$residuals^2) / 48)
s <- sqrt(sum(fit$residuals^2) / 48)
sum(x * y)/s
summary(fit)
y1 <- 5 * y
summary(lm(y1 ~ x))
y2 <- 5 * y + 6
summary(lm(y2 ~ x))
mean(x)
sum(x^2)
summary(lm(y ~ x))
summary(lm(y1 ~ x))
summary(lm(y2 ~ x))
y3 <- y + 1:50
summary(lm(y3 ~ x))
y3 <- y - 1:50
summary(lm(y3 ~ x))
?rexp
x <- rexp(1000)
hist(x)
hist(exp(x))
hist(exp(-x))
library(mda)
install.packages("mda")
library(mda)
?mda
?svd
0.934841 + 30(-0.010570) + 100(0.012773)
0.934841 + 30*(-0.010570) + 100*(0.012773)
x <- 0.934841 + 30*(-0.010570) + 100*(0.012773)
exp(x) / (1 + exp(x))
hist( rnorm(1000)*rnorm(1000),50 )
hist( apply( matrix( rnorm(10000),ncol=10)*matrix(
rnorm(10000),ncol=10), 1, sum), 50 )
hist( rnorm(1000)*unif(1000),50 )
hist( rnorm(1000)*runif(1000),50 )
hist( rnorm(1000)*rnorm(1000),50 )
hist( rnorm(1000)*runif(1000),50 )
hist( rnorm(1000)*runif(1000),50 )
hist( rnorm(1000)*runif(1000),50 )
hist( rnorm(1000)*runif(1000),50 )
hist( rnorm(1000)*runif(1000),50 )
hist( apply( matrix( rnorm(10000),ncol=10)*matrix(
runif(10000),ncol=10), 1, sum), 50 )
hist( apply( matrix( rnorm(10000),ncol=10)*matrix(
runif(10000),ncol=10), 1, sum), 50 )
1 * 1486 + 2 * 694 + 3 * 195 + 4 * 37
1 * 1486 + 2 * 694 + 3 * 195 + 4 * 37 + 5 * 10 + 6 * 1
1486+694+195+37+10+1
3663 - 2423 - 2423/(exp(1) - 1)
n <- 3663 - 2423 - 2423/(exp(1) - 1)
-3663- 2423 * exp(1) / (exp(1) - 1)^2
d <- -3663- 2423 * exp(1) / (exp(1) - 1)^2
1 - n/d
d <- -3663+ 2423 * exp(1) / (exp(1) - 1)^2
d
1 - n/d
-1/d
sqrt(-1/d)
d <- -3663- 2423 * exp(1) / (exp(1) - 1)^2
sqrt(-1/d)
1 - exp(-10)
exp(-10) * 10
setwd("~/Documents/GitHub/FIFA-world-cup-2018")
pageRank <- function(L, d) {
N <- nrow(L)
# if a column of L does not point to anything, we make it
# point to itself
for (j in 1:N) {
if (sum(L[, j]) == 0) L[j, j] <- 1
}
D_c <- diag(colSums(L))
e <- matrix(1, nrow = N, ncol = 1)
A <- (1-d) * e %*% t(e) / N + d * L %*% solve(D_c)
# return the first eigenvector of A (normalized to have entries sum to 1)
p <- eigen(A)$vectors[, 1]
as.numeric(p / sum(p))
}
library(tidyverse)
country_df <- read_csv("World_cup_2018_country.csv")
matches_df <- read_csv("World_cup_2018_matches.csv",
col_types = cols(Date = col_date(format = "%Y-%m-%d")))
# select relevant rows
df <- matches_df %>%
select(Home:Away_goals)
df <- df %>%
mutate(Home_rank = match(df$Home, country_df$Country),
Away_rank = match(df$Away, country_df$Country))
N <- nrow(country_df)
L <- matrix(0, nrow = N, ncol = N)
for (i in 1:nrow(df)) {
if (df$Home_goals[i] > df$Away_goals[i]) {
L[df$Home_rank[i], df$Away_rank[i]] <- 1
} else if (df$Home_goals[i] < df$Away_goals[i]) {
L[df$Away_rank[i], df$Home_rank[i]] <- 1
} else {
L[df$Home_rank[i], df$Away_rank[i]] <- 0.5
L[df$Away_rank[i], df$Home_rank[i]] <- 0.5
}
}
d <- 0.85
country_df$Quality <- pageRank(L, d)
country_df$Quality_ranking <- rank(-pageRank(L, d), "min")
ggplot(country_df,
aes(x = Tournament_ranking, y = Quality_ranking, label = Country, col = Group)) +
geom_point() +
geom_text()
